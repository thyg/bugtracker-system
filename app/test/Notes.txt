import {
  RefreshCw,
  Inbox,
  Code,
  Zap,
  Filter,
  TrendingUp,
  Play,
  PackagePlus,
  Megaphone,
  Clock,
  AlertCircle,
  Hammer,
  Layout,
  Archive,
  BarChart2,
} from "lucide-react";

const sidebarItems = [
  {
    title: "Actualiser",
    href: "/refresh",
    icon: <RefreshCw />,
  },
  {
    title: "Bo√Æte de r√©ception",
    href: "/inbox",
    icon: <Inbox />,
  },
  {
    title: "D√©p√¥ts",
    href: "/code",
    icon: <Code />,
  },
  {
    title: "Pipeline",
    href: "/pipeline",
    icon: <Zap />,
  },
  {
    title: "Filtres",
    href: "/filters",
    icon: <Filter />,
  },
  {
    title: "Analytique",
    href: "/analytics",
    icon: <TrendingUp />,
  },
  {
    title: "Ex√©cution",
    href: "/run",
    icon: <Play />,
  },
  {
    title: "Int√©grations",
    href: "/integrations",
    icon: <PackagePlus />,
  },
  {
    title: "Annonces",
    href: "/annonces",
    icon: <Megaphone />,
  },
  {
    title: "Historique",
    href: "/history",
    icon: <Clock />,
  },
  {
    title: "Alertes",
    href: "/alerts",
    icon: <AlertCircle />,
  },
  {
    title: "Actions",
    href: "/actions",
    icon: <Hammer />,
  },
  {
    title: "Disposition",
    href: "/layout",
    icon: <Layout />,
  },
  {
    title: "Archives",
    href: "/archives",
    icon: <Archive />,
  },
  {
    title: "Graphiques",
    href: "/charts",
    icon: <BarChart2 />,
  },
];

export default sidebarItems;











Pour une **page de d√©monstration (demo)** sur ton **site web de bug tracker**, tu veux impressionner les visiteurs tout en leur montrant les **fonctionnalit√©s cl√©s**, la **valeur ajout√©e** et **l'exp√©rience utilisateur** de ton produit.

---

## üéØ Objectif de la page demo

* Montrer **√† quoi ressemble** le bug tracker.
* Permettre √† l‚Äôutilisateur d‚Äô**essayer rapidement** (sans inscription si possible).
* Mettre en avant les **points forts** : rapidit√©, collaboration, assignation, filtres, vue Kanban, etc.


* Une animation courte (30s‚Äì1min) montrant :

  * Cr√©ation d‚Äôun ticket
  * Attribution √† un d√©veloppeur
  * √âvolution de statut (To Do ‚Üí In Progress ‚Üí Done)

* Interface r√©elle, sans possibilit√© de modifier les donn√©es.
* Montre : dashboard, ticket list, vue Kanban, d√©tails du ticket.
* Permet de cr√©er/modifier des tickets.

### 4. **Capture d‚Äô√©cran interactive (hover/click pour zoom)**

* Affiche des captures cliquables :

  * Vue d‚Äôensemble
  * Ticket details
  * Filtres de recherche
  * Notifications en temps r√©el



### 5. **Mises en avant des fonctionnalit√©s**

Pr√©sente-les par blocs :

* ‚úÖ Cr√©ation rapide de tickets
* üë• Assignation √† des membres
* üì¶ Gestion par projet
* üè∑Ô∏è Tags & priorit√©
* üìä Graphiques et reporting



* **S‚Äôinscrire gratuitement**
* **Voir les tarifs**
* **Contacter l‚Äô√©quipe**

* **Animation** : Framer Motion, Lottie pour onboarding






import { useAuth } from "@/lib/auth-context"
const { user, logout, isAuthenticated } = useAuth()


                    {user.avatar ? (
                      
                    ) : (
                      
                        {getInitials(user.name)}
                      
                    )}
                  


                  


                    

{user.name}


                    


                      {user.email}
                    


                  


                  
                


              

je veux que certaines informations de l'utilisateur soit r√©ellement et non une simulation