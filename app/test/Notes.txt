import {
  RefreshCw,
  Inbox,
  Code,
  Zap,
  Filter,
  TrendingUp,
  Play,
  PackagePlus,
  Megaphone,
  Clock,
  AlertCircle,
  Hammer,
  Layout,
  Archive,
  BarChart2,
} from "lucide-react";

const sidebarItems = [
  {
    title: "Actualiser",
    href: "/refresh",
    icon: <RefreshCw />,
  },
  {
    title: "Bo√Æte de r√©ception",
    href: "/inbox",
    icon: <Inbox />,
  },
  {
    title: "D√©p√¥ts",
    href: "/code",
    icon: <Code />,
  },
  {
    title: "Pipeline",
    href: "/pipeline",
    icon: <Zap />,
  },
  {
    title: "Filtres",
    href: "/filters",
    icon: <Filter />,
  },
  {
    title: "Analytique",
    href: "/analytics",
    icon: <TrendingUp />,
  },
  {
    title: "Ex√©cution",
    href: "/run",
    icon: <Play />,
  },
  {
    title: "Int√©grations",
    href: "/integrations",
    icon: <PackagePlus />,
  },
  {
    title: "Annonces",
    href: "/annonces",
    icon: <Megaphone />,
  },sonne
  {
    title: "Historique",
    href: "/history",
    icon: <Clock />,
  },
  {
    title: "Alertes",
    href: "/alerts",
    icon: <AlertCircle />,
  },
  {
    title: "Actions",
    href: "/actions",
    icon: <Hammer />,
  },
  {
    title: "Disposition",
    href: "/layout",
    icon: <Layout />,
  },
  {
    title: "Archives",
    href: "/archives",
    icon: <Archive />,
  },
  {
    title: "Graphiques",
    href: "/charts",
    icon: <BarChart2 />,
  },
];

export default sidebarItems;











Pour une **page de d√©monstration (demo)** sur ton **site web de bug tracker**, tu veux impressionner les visiteurs tout en leur montrant les **fonctionnalit√©s cl√©s**, la **valeur ajout√©e** et **l'exp√©rience utilisateur** de ton produit.

---

## üéØ Objectif de la page demo

* Montrer **√† quoi ressemble** le bug tracker.
* Permettre √† l‚Äôutilisateur d‚Äô**essayer rapidement** (sans inscription si possible).
* Mettre en avant les **points forts** : rapidit√©, collaboration, assignation, filtres, vue Kanban, etc.


* Une animation courte (30s‚Äì1min) montrant :

  * Cr√©ation d‚Äôun ticket
  * Attribution √† un d√©veloppeur
  * √âvolution de statut (To Do ‚Üí In Progress ‚Üí Done)

* Interface r√©elle, sans possibilit√© de modifier les donn√©es.
* Montre : dashboard, ticket list, vue Kanban, d√©tails du ticket.
* Permet de cr√©er/modifier des tickets.

### 4. **Capture d‚Äô√©cran interactive (hover/click pour zoom)**

* Affiche des captures cliquables :

  * Vue d‚Äôensemble
  * Ticket details
  * Filtres de recherche
  * Notifications en temps r√©el



### 5. **Mises en avant des fonctionnalit√©s**

Pr√©sente-les par blocs :

* ‚úÖ Cr√©ation rapide de tickets
* üë• Assignation √† des membres
* üì¶ Gestion par projet
* üè∑Ô∏è Tags & priorit√©
* üìä Graphiques et reporting



* **S‚Äôinscrire gratuitement**
* **Voir les tarifs**
* **Contacter l‚Äô√©quipe**

* **Animation** : Framer Motion, Lottie pour onboarding









√âtape 3 : Int√©gration dans vos pages
Modifiez chaque page existante :
jsximport SEO from '../components/SEO'

export default function MaPage() {
  return (
    <>
      <SEO 
        title="Titre de ma page"
        description="Description de ma page pour le SEO"
        url="https://monsite.com/ma-page"
        image="/images/ma-page-og.jpg"
      />
      {/* Votre contenu existant */}
    </>
  )
}











import Image from 'next/image'

// Avant
<img src="/photo.jpg" alt="Description" />

// Apr√®s
<Image 
  src="/photo.jpg" 
  alt="Description" 
  width={800} 
  height={600}
  priority // Pour les images above-the-fold
/>













√âTAPE 5 : Impl√©mentation de getStaticProps
1. Dans vos pages existantes, ajoutez getStaticProps :
jsx// pages/destinations.js (exemple)
export default function Destinations({ destinations }) {
  return (
    <>
      <SEO 
        title="Nos Destinations"
        description="D√©couvrez nos destinations de voyage"
      />
      <div>
        {destinations.map(dest => (
          <div key={dest.id}>{dest.name}</div>
        ))}
      </div>
    </>
  )
}

export async function getStaticProps() {
  try {
    // Remplacez par votre vraie API
    const res = await fetch('https://votre-api.com/destinations')
    const destinations = await res.json()

    return {
      props: {
        destinations,
      },
      revalidate: 3600, // R√©g√©n√®re toutes les heures
    }
  } catch (error) {
    return {
      props: {
        destinations: [],
      },
    }
  }
}

2. Pour les pages dynamiques, utilisez getStaticPaths :
jsx// pages/destination/[slug].js
export async function getStaticPaths() {
  const res = await fetch('https://votre-api.com/destinations')
  const destinations = await res.json()

  const paths = destinations.map((dest) => ({
    params: { slug: dest.slug },
  }))

  return { paths, fallback: 'blocking' }
}

export async function getStaticProps({ params }) {
  const res = await fetch(`https://votre-api.com/destinations/${params.slug}`)
  const destination = await res.json()

  return {
    props: { destination },
    revalidate: 3600,
  }
}










üéØ Prochaines √©tapes SEO
1. Appliquer le SEO aux autres pages importantes
Exemple pour app/dashboard/layout.tsx :

import { generateSEOMetadata } from "@/components/SEO"

export const metadata = generateSEOMetadata({
  title: "Dashboard",
  description: "Tableau de bord de gestion des bugs et projets",
  url: "/dashboard",
})

export default function DashboardLayout({ children }: { children: React.ReactNode }) {
  return <>{children}</>
}
2. Optimiser les pages dynamiques
Pour app/issues/[id]/page.tsx :

import { generateSEOMetadata } from "@/components/SEO"

export async function generateMetadata({ params }: { params: { id: string } }) {
  // R√©cup√©rer les donn√©es du bug
  const issue = await getIssue(params.id) // Votre fonction de r√©cup√©ration
  
  return generateSEOMetadata({
    title: `Issue #${params.id}: ${issue?.title || 'Bug Report'}`,
    description: issue?.description || 'D√©tails du bug et suivi de r√©solution',
    url: `/issues/${params.id}`,
  })
}
3. Cr√©er des images Open Graph
Cr√©ez des images optimis√©es dans public/images/ :

og-default.jpg (1200x630px)
og-dashboard.jpg
og-pricing.jpg

üöÄ
