#version: "3.8"

services:
  # ============== ÉVÉNEMENTS ==============
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - bugtracker_network

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:19092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - bugtracker_network

  # ============== BASE DE DONNÉES ==============
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: bugtracker
      POSTGRES_PASSWORD: bug123
      POSTGRES_DB: bugdb
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports: 
      - "${DB_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - bugtracker_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "bugtracker", "-d", "bugdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============== SERVICE D'INGESTION ==============
  ingestion:
    build:
      context: ./service-ingestion
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    ports: 
      - "${INGESTION_PORT:-8081}:8081"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - bugtracker_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/api/errors/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============== SERVICE DE TRAITEMENT ==============
  traitement:
    build:
      context: ./service-traitement
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    ports: 
      - "${TRAITEMENT_PORT:-8082}:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/bugdb
      - SPRING_DATASOURCE_USERNAME=bugtracker
      - SPRING_DATASOURCE_PASSWORD=bug123
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - bugtracker_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/api/bugs"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ============== FRONTEND (CORRIGÉ) ==============
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        #REACT_APP_API_URL: "${REACT_APP_API_URL:-http://localhost:8082}"
        NEXT_PUBLIC_API_URL: "${NEXT_PUBLIC_API_URL:-http://localhost:8082}"
    ports: 
      - "3000:3000"
    networks:
      - bugtracker_network

  # ============== APPLICATION DE TEST AVEC AGENT (Version simple et correcte) ==============
  test-app-with-agent:
    image: eclipse-temurin:17-jre-alpine
    depends_on:
      ingestion:
        condition: service_healthy
    volumes:
      # On monte le JAR de l'agent compilé localement
      - ./agent-java/target/bugtracker-agent-1.0.0-SNAPSHOT-agent.jar:/app/agent/bugtracker-agent.jar:ro
      # On monte le JAR de l'application de test compilé localement
      - ./examples/test-app.jar:/app/test-app.jar:ro
    # La commande à exécuter à l'intérieur du conteneur
    command: java -javaagent:/app/agent/bugtracker-agent.jar -Dbugtracker.debug=true -Dbugtracker.projectKey=PROJECT-DOCKER-TEST -jar /app/test-app.jar
    networks:
      - bugtracker_network
    profiles:
      - agent-test
# ========================================================
# VOLUMES
# ========================================================
volumes:
  pgdata:
  scydata:
  ingestion_logs:
  prometheus_data:
  grafana_data:
  agent_jar:

# ========================================================
# NETWORKS
# ========================================================
networks:
  bugtracker_network:
    driver: bridge