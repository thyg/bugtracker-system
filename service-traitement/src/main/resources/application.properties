# Port du service de traitement
server.port=8082

# Nom de l'application
spring.application.name=service-traitement

# --- Configuration de la base de données PostgreSQL ---
# L'URL pointe vers le service 'postgres' de Docker sur son port par défaut
spring.datasource.url=jdbc:postgresql://postgres:5432/bugdb
spring.datasource.username=bugtracker
spring.datasource.password=bug123
spring.datasource.driver-class-name=org.postgresql.Driver

# --- Configuration de JPA/Hibernate ---
# 'update' va créer/mettre à jour les tables au démarrage en se basant sur vos Entités. Parfait pour le dev.
spring.jpa.hibernate.ddl-auto=update
# Affiche les requêtes SQL dans les logs, très utile pour le debug
spring.jpa.show-sql=true
# Utiliser la syntaxe PostgreSQL pour le JSONB
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# --- Configuration de Kafka Consumer ---
spring.kafka.bootstrap-servers=kafka:9092
# L'identifiant du groupe de consommateurs.
spring.kafka.consumer.group-id=bug-processors
# On dit à Kafka comment lire les clés et les valeurs (ici, de simples chaînes de caractères)
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Recommencer à lire depuis le début si le service est nouveau
spring.kafka.consumer.auto-offset-reset=earliest

# --- Configuration du Topic ---
# Doit correspondre au nom du topic utilisé par le service-ingestion
bugtracker.kafka-topic=bugs.reported